package com.hello.netty.xieyi.coder;

import java.nio.ByteOrder;
import java.util.HashMap;
import java.util.Map;

import com.hello.netty.xieyi.coder.util.MarshallingCodeCFactory;
import com.hello.netty.xieyi.coder.util.NettyMarshallingD;
import com.hello.netty.xieyi.entry.Header;
import com.hello.netty.xieyi.entry.NettyMessage;

import io.netty.buffer.ByteBuf;
import io.netty.channel.ChannelHandlerContext;
import io.netty.handler.codec.LengthFieldBasedFrameDecoder;

public class NettyMessageDecoder extends LengthFieldBasedFrameDecoder {

	private NettyMarshallingD marshallingDecoder; 
	public NettyMessageDecoder(ByteOrder byteOrder, int maxFrameLength, int lengthFieldOffset, int lengthFieldLength,
			int lengthAdjustment) {
		super(byteOrder, maxFrameLength, lengthFieldOffset, lengthFieldLength, lengthAdjustment);
		
		this.marshallingDecoder = MarshallingCodeCFactory.buildMarshallingDecoder();
	}
	
	/*解码*/
	@Override
	protected Object decode(ChannelHandlerContext ctx, ByteBuf in) throws Exception {
		ByteBuf frame = (ByteBuf) super.decode(ctx, in);
		if(frame==null){
			return null;
		}
		
		NettyMessage message = new NettyMessage();//实例化协议
		
		Header header =  new Header();
		header.setCrcCode(frame.readInt());
		header.setLength(frame.readInt());
		header.setSessionid(frame.readLong());
		header.setType(frame.readByte());
		header.setPriority(frame.readByte());
		
		int size = frame.readInt();
		//判断是否有附件数据
		if(size>0){
			Map<String,Object>attach = new HashMap<String,Object>();
			int keySize= 0;
			byte [] keyArray = null;
			String key = null;
			for(int i = 0 ;i<size;i++){
				keySize = frame.readInt();
				keyArray = new byte[keySize];
				frame.readBytes(keyArray);//默认 写入数据为in。  
				key = new String(keyArray,"utf-8");
				attach.put(key, marshallingDecoder.decode(ctx, frame));//默认为in  
			}
		}
		
		if(frame.readableBytes()>0){
			message.setBody(marshallingDecoder.decode(ctx, frame));
		}
		message.setHeader(header);
		return message;
	}

	
	
	
}
