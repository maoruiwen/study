package com.hello.netty.xieyi.coder;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.hello.netty.marshalling.MarshallingCodeCFactory;
import com.hello.netty.xieyi.entry.NettyMessage;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.channel.ChannelHandlerContext;
import io.netty.handler.codec.MessageToMessageEncoder;
import io.netty.handler.codec.marshalling.MarshallingEncoder;

/**
 * 消息编码处理。
 * @author Administrator
 *
 */
public class NettyMessageEncoder extends MessageToMessageEncoder<NettyMessage> {
	private MarshallingEncoder marshallingEncoder;
	
	public  NettyMessageEncoder() {
		this.marshallingEncoder = MarshallingCodeCFactory.buildMarshallingEncoder();
	}
	
	@Override
	protected void encode(ChannelHandlerContext ctx, NettyMessage msg, List<Object> out) throws Exception {
		
		/*校验消息内容是否为空*/
		if(msg==null||msg.getHeader() == null){
			System.out.println("消息编码，消息体为空");
			throw new Exception("消息内容为空");
		}
		
		/*private int crcCode = 0xabef0101;//消息校验码（2884567297）1，0xabef（44015） + 主版本号 +次版本号 
		private int length ; //消息体长度。
		private long sessionid;//回话id。
		private byte type; //消息类型。
		private byte priority;//优先级
		private Map<String,Object>attachment = new HashMap<String, Object>();//附件，扩展字段。
*/		
		ByteBuf sendBuf = Unpooled.buffer();
		sendBuf.writeInt(msg.getHeader().getCrcCode());
		sendBuf.writeInt(msg.getHeader().getLength());
		sendBuf.writeLong(msg.getHeader().getSessionid());
		sendBuf.writeByte(msg.getHeader().getType());
		sendBuf.writeByte(msg.getHeader().getPriority());
		sendBuf.writeInt(msg.getHeader().getAttachment().size());//附件的长度
		
		String key = null;
		byte [] keyArray = null;
		Object value = null;
		
		for(Map.Entry<String, Object>param:msg.getHeader().getAttachment().entrySet()){
			key = param.getKey();
			keyArray = key.getBytes();
			sendBuf.writeInt(keyArray.length);
			sendBuf.writeBytes(keyArray);
			value = param.getValue();
		}
		
		
		
		
	}

}
